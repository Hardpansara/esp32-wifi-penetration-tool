#ifndef PAGE_INDEX_H
#define PAGE_INDEX_H

const char page_index[] =
    "<!DOCTYPE html>\n"
    "<html>\n"
    "<head>\n"
    "    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n"
    "    <title>ESP32 WiFi Penetration Tool</title>\n"
    "    <style>\n"
    "        :root {\n"
    "            --primary-color: #2196F3;\n"
    "            --secondary-color: #1976D2;\n"
    "            --success-color: #4CAF50;\n"
    "            --error-color: #F44336;\n"
    "            --warning-color: #FFC107;\n"
    "            --text-color: #333;\n"
    "            --bg-color: #f5f5f5;\n"
    "            --card-bg: #ffffff;\n"
    "            --border-color: #e0e0e0;\n"
    "            --hover-color: #f0f0f0;\n"
    "            --selected-color: #e3f2fd;\n"
    "        }\n"
    "\n"
    "        * {\n"
    "            box-sizing: border-box;\n"
    "            margin: 0;\n"
    "            padding: 0;\n"
    "            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n"
    "        }\n"
    "\n"
    "        body {\n"
    "            background-color: var(--bg-color);\n"
    "            color: var(--text-color);\n"
    "            line-height: 1.6;\n"
    "            padding: 20px;\n"
    "            max-width: 1200px;\n"
    "            margin: 0 auto;\n"
    "        }\n"
    "\n"
    "        .container {\n"
    "            background-color: var(--card-bg);\n"
    "            border-radius: 12px;\n"
    "            box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n"
    "            padding: 25px;\n"
    "            margin-bottom: 25px;\n"
    "            transition: all 0.3s ease;\n"
    "        }\n"
    "\n"
    "        .container:hover {\n"
    "            box-shadow: 0 6px 12px rgba(0,0,0,0.15);\n"
    "        }\n"
    "\n"
    "        h1 {\n"
    "            color: var(--primary-color);\n"
    "            text-align: center;\n"
    "            margin-bottom: 25px;\n"
    "            font-size: 2.2em;\n"
    "            font-weight: 600;\n"
    "        }\n"
    "\n"
    "        h2 {\n"
    "            color: var(--secondary-color);\n"
    "            margin-bottom: 20px;\n"
    "            font-size: 1.5em;\n"
    "            border-bottom: 2px solid var(--border-color);\n"
    "            padding-bottom: 10px;\n"
    "        }\n"
    "\n"
    "        h3 {\n"
    "            color: var(--primary-color);\n"
    "            margin-bottom: 15px;\n"
    "            font-size: 1.2em;\n"
    "        }\n"
    "\n"
    "        table {\n"
    "            width: 100%;\n"
    "            border-collapse: separate;\n"
    "            border-spacing: 0;\n"
    "            margin: 20px 0;\n"
    "            background-color: var(--card-bg);\n"
    "            box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n"
    "            border-radius: 8px;\n"
    "            overflow: hidden;\n"
    "        }\n"
    "\n"
    "        th, td {\n"
    "            padding: 15px;\n"
    "            text-align: left;\n"
    "            border-bottom: 1px solid var(--border-color);\n"
    "        }\n"
    "\n"
    "        th {\n"
    "            background-color: var(--primary-color);\n"
    "            color: white;\n"
    "            font-weight: 600;\n"
    "        }\n"
    "\n"
    "        tr {\n"
    "            transition: all 0.2s ease;\n"
    "        }\n"
    "\n"
    "        tr:hover {\n"
    "            background-color: var(--hover-color);\n"
    "            cursor: pointer;\n"
    "        }\n"
    "\n"
    "        tr.selected {\n"
    "            background-color: var(--selected-color) !important;\n"
    "            box-shadow: inset 0 0 0 2px var(--primary-color);\n"
    "        }\n"
    "\n"
    "        .form-group {\n"
    "            margin-bottom: 20px;\n"
    "        }\n"
    "\n"
    "        label {\n"
    "            display: block;\n"
    "            margin-bottom: 8px;\n"
    "            font-weight: 600;\n"
    "            color: var(--text-color);\n"
    "        }\n"
    "\n"
    "        select, input {\n"
    "            width: 100%;\n"
    "            padding: 12px;\n"
    "            border: 2px solid var(--border-color);\n"
    "            border-radius: 6px;\n"
    "            font-size: 16px;\n"
    "            transition: all 0.3s ease;\n"
    "            background-color: var(--card-bg);\n"
    "        }\n"
    "\n"
    "        select:focus, input:focus {\n"
    "            border-color: var(--primary-color);\n"
    "            outline: none;\n"
    "            box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);\n"
    "        }\n"
    "\n"
    "        button {\n"
    "            background-color: var(--primary-color);\n"
    "            color: white;\n"
    "            border: none;\n"
    "            padding: 12px 24px;\n"
    "            border-radius: 6px;\n"
    "            cursor: pointer;\n"
    "            font-size: 16px;\n"
    "            font-weight: 600;\n"
    "            transition: all 0.3s ease;\n"
    "            text-transform: uppercase;\n"
    "            letter-spacing: 0.5px;\n"
    "        }\n"
    "\n"
    "        button:hover {\n"
    "            background-color: var(--secondary-color);\n"
    "            transform: translateY(-2px);\n"
    "            box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n"
    "        }\n"
    "\n"
    "        button:active {\n"
    "            transform: translateY(0);\n"
    "        }\n"
    "\n"
    "        .status {\n"
    "            padding: 15px;\n"
    "            border-radius: 6px;\n"
    "            margin-bottom: 15px;\n"
    "            font-weight: 500;\n"
    "        }\n"
    "\n"
    "        .error {\n"
    "            background-color: var(--error-color);\n"
    "            color: white;\n"
    "        }\n"
    "\n"
    "        .success {\n"
    "            background-color: var(--success-color);\n"
    "            color: white;\n"
    "        }\n"
    "\n"
    "        .warning {\n"
    "            background-color: var(--warning-color);\n"
    "            color: black;\n"
    "        }\n"
    "\n"
    "        .progress-bar {\n"
    "            width: 100%;\n"
    "            height: 25px;\n"
    "            background-color: var(--border-color);\n"
    "            border-radius: 12px;\n"
    "            overflow: hidden;\n"
    "            margin: 15px 0;\n"
    "            box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);\n"
    "        }\n"
    "\n"
    "        .progress {\n"
    "            height: 100%;\n"
    "            background-color: var(--primary-color);\n"
    "            transition: width 0.3s ease;\n"
    "            position: relative;\n"
    "        }\n"
    "\n"
    "        .progress::after {\n"
    "            content: '';\n"
    "            position: absolute;\n"
    "            top: 0;\n"
    "            left: 0;\n"
    "            right: 0;\n"
    "            bottom: 0;\n"
    "            background: linear-gradient(90deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.2) 50%, rgba(255,255,255,0.1) 100%);\n"
    "            animation: progress-shine 2s infinite;\n"
    "        }\n"
    "\n"
    "        @keyframes progress-shine {\n"
    "            0% { transform: translateX(-100%); }\n"
    "            100% { transform: translateX(100%); }\n"
    "        }\n"
    "\n"
    "        @media (max-width: 768px) {\n"
    "            body {\n"
    "                padding: 10px;\n"
    "            }\n"
    "\n"
    "            .container {\n"
    "                padding: 15px;\n"
    "            }\n"
    "\n"
    "            table {\n"
    "                display: block;\n"
    "                overflow-x: auto;\n"
    "            }\n"
    "\n"
    "            h1 {\n"
    "                font-size: 1.8em;\n"
    "            }\n"
    "\n"
    "            h2 {\n"
    "                font-size: 1.3em;\n"
    "            }\n"
    "        }\n"
    "    </style>\n"
    "</head>\n"
    "<body onLoad=\"getStatus()\">\n"
    "    <div class=\"container\">\n"
    "        <h1>ESP32 WiFi Penetration Tool</h1>\n"
    "        <div id=\"errors\" class=\"status\"></div>\n"
    "        <div id=\"loading\" class=\"status\">Loading... Please wait</div>\n"
    "    </div>\n"
    "\n"
    "    <div id=\"ready\" class=\"container\" style=\"display: none;\">\n"
    "        <h2>Attack Configuration</h2>\n"
    "        <form onSubmit=\"runAttack(); return false;\">\n"
    "            <div class=\"form-group\">\n"
    "                <h3>Select Target</h3>\n"
    "                <div class=\"table-container\">\n"
    "                    <table id=\"ap-list\">\n"
    "                        <thead>\n"
    "                            <tr>\n"
    "                                <th>SSID</th>\n"
    "                                <th>BSSID</th>\n"
    "                                <th>Signal Strength</th>\n"
    "                            </tr>\n"
    "                        </thead>\n"
    "                        <tbody></tbody>\n"
    "                    </table>\n"
    "                </div>\n"
    "                <button type=\"button\" onClick=\"refreshAps()\">Refresh Access Points</button>\n"
    "            </div>\n"
    "\n"
    "            <div class=\"form-group\">\n"
    "                <h3>Attack Settings</h3>\n"
    "                <div class=\"form-group\">\n"
    "                    <label for=\"attack_type\">Attack Type:</label>\n"
    "                    <select id=\"attack_type\" onChange=\"updateConfigurableFields(this)\" required>\n"
    "                        <option value=\"0\" disabled>Passive Scan</option>\n"
    "                        <option value=\"1\">Handshake Capture</option>\n"
    "                        <option value=\"2\" selected>PMKID Capture</option>\n"
    "                        <option value=\"3\">Denial of Service</option>\n"
    "                    </select>\n"
    "                </div>\n"
    "\n"
    "                <div class=\"form-group\">\n"
    "                    <label for=\"attack_method\">Attack Method:</label>\n"
    "                    <select id=\"attack_method\" required disabled>\n"
    "                        <option value=\"\" selected disabled hidden>Select Attack Type First</option>\n"
    "                    </select>\n"
    "                </div>\n"
    "\n"
    "                <div class=\"form-group\">\n"
    "                    <label for=\"attack_timeout\">Attack Duration (seconds):</label>\n"
    "                    <input type=\"number\" min=\"0\" max=\"255\" id=\"attack_timeout\" value=\"30\" required/>\n"
    "                </div>\n"
    "\n"
    "                <button type=\"submit\">Start Attack</button>\n"
    "            </div>\n"
    "        </form>\n"
    "    </div>\n"
    "\n"
    "    <div id=\"running\" class=\"container\" style=\"display: none;\">\n"
    "        <h2>Attack in Progress</h2>\n"
    "        <div class=\"progress-bar\">\n"
    "            <div class=\"progress\" id=\"progress-bar\"></div>\n"
    "        </div>\n"
    "        <p>Time elapsed: <span id=\"running-progress\">0/0s</span></p>\n"
    "    </div>\n"
    "\n"
    "    <div id=\"result\" class=\"container\" style=\"display: none;\">\n"
    "        <h2>Attack Results</h2>\n"
    "        <div id=\"result-meta\" class=\"status\"></div>\n"
    "        <div id=\"result-content\"></div>\n"
    "        <button type=\"button\" onClick=\"resetAttack()\">Start New Attack</button>\n"
    "    </div>\n"
    "\n"
    "    <script>\n"
    "    var AttackStateEnum = { READY: 0, RUNNING: 1, FINISHED: 2, TIMEOUT: 3};\n"
    "    var AttackTypeEnum = { ATTACK_TYPE_PASSIVE: 0, ATTACK_TYPE_HANDSHAKE: 1, ATTACK_TYPE_PMKID: 2, ATTACK_TYPE_DOS: 3};\n"
    "    var selectedApElement = null;\n"
    "    var poll;\n"
    "    var poll_interval = 1000;\n"
    "    var running_poll;\n"
    "    var running_poll_interval = 1000;\n"
    "    var attack_timeout = 0;\n"
    "    var time_elapsed = 0;\n"
    "    var defaultResultContent = document.getElementById(\"result\").innerHTML;\n"
    "    var defaultAttackMethods = document.getElementById(\"attack_method\").outerHTML;\n"
    "\n"
    "    function updateProgressBar() {\n"
    "        const progress = (time_elapsed / attack_timeout) * 100;\n"
    "        document.getElementById(\"progress-bar\").style.width = `${progress}%`;\n"
    "    }\n"
    "\n"
    "    function showError(message) {\n"
    "        const errorDiv = document.getElementById(\"errors\");\n"
    "        errorDiv.innerHTML = message;\n"
    "        errorDiv.className = \"status error\";\n"
    "        errorDiv.style.display = \"block\";\n"
    "    }\n"
    "\n"
    "    function clearError() {\n"
    "        const errorDiv = document.getElementById(\"errors\");\n"
    "        errorDiv.innerHTML = \"\";\n"
    "        errorDiv.className = \"status\";\n"
    "        errorDiv.style.display = \"none\";\n"
    "    }\n"
    "\n"
    "    function getStatus() {\n"
    "        var oReq = new XMLHttpRequest();\n"
    "        oReq.onload = function() {\n"
    "            var arrayBuffer = oReq.response;\n"
    "            if(arrayBuffer) {\n"
    "                var attack_state = parseInt(new Uint8Array(arrayBuffer, 0, 1));\n"
    "                var attack_type = parseInt(new Uint8Array(arrayBuffer, 1, 1));\n"
    "                var attack_content_size = parseInt(new Uint16Array(arrayBuffer, 2, 1));\n"
    "                var attack_content = new Uint8Array(arrayBuffer, 4);\n"
    "                \n"
    "                hideAllSections();\n"
    "                clearError();\n"
    "                \n"
    "                switch(attack_state) {\n"
    "                    case AttackStateEnum.READY:\n"
    "                        showAttackConfig();\n"
    "                        break;\n"
    "                    case AttackStateEnum.RUNNING:\n"
    "                        showRunning();\n"
    "                        setTimeout(getStatus, poll_interval);\n"
    "                        break;\n"
    "                    case AttackStateEnum.FINISHED:\n"
    "                        showResult(\"Attack Completed Successfully\", attack_type, attack_content_size, attack_content);\n"
    "                        break;\n"
    "                    case AttackStateEnum.TIMEOUT:\n"
    "                        showResult(\"Attack Timed Out\", attack_type, attack_content_size, attack_content);\n"
    "                        break;\n"
    "                    default:\n"
    "                        showError(\"Error: Unknown attack state\");\n"
    "                }\n"
    "            }\n"
    "        };\n"
    "        \n"
    "        oReq.onerror = function() {\n"
    "            showError(\"Cannot reach ESP32. Please check your connection to the management AP.\");\n"
    "            setTimeout(getStatus, poll_interval);\n"
    "        };\n"
    "        \n"
    "        oReq.ontimeout = function() {\n"
    "            showError(\"Connection timeout. Retrying...\");\n"
    "            setTimeout(getStatus, poll_interval);\n"
    "        };\n"
    "        \n"
    "        oReq.open(\"GET\", \"http://192.168.4.1/status\", true);\n"
    "        oReq.responseType = \"arraybuffer\";\n"
    "        oReq.send();\n"
    "    }\n"
    "\n"
    "    function hideAllSections() {\n"
    "        document.getElementById(\"loading\").style.display = \"none\";\n"
    "        document.getElementById(\"ready\").style.display = \"none\";\n"
    "        document.getElementById(\"running\").style.display = \"none\";\n"
    "        document.getElementById(\"result\").style.display = \"none\";\n"
    "    }\n"
    "\n"
    "    function showRunning() {\n"
    "        document.getElementById(\"running\").style.display = \"block\";\n"
    "        updateProgressBar();\n"
    "    }\n"
    "\n"
    "    function countProgress() {\n"
    "        if(time_elapsed >= attack_timeout) {\n"
    "            showError(\"Please reconnect to management AP\");\n"
    "            clearInterval(running_poll);\n"
    "            return;\n"
    "        }\n"
    "        document.getElementById(\"running-progress\").innerHTML = `${time_elapsed}/${attack_timeout}s`;\n"
    "        time_elapsed++;\n"
    "        updateProgressBar();\n"
    "    }\n"
    "\n"
    "    function showAttackConfig() {\n"
    "        document.getElementById(\"ready\").style.display = \"block\";\n"
    "        refreshAps();\n"
    "    }\n"
    "\n"
    "    function showResult(status, attack_type, attack_content_size, attack_content) {\n"
    "        document.getElementById(\"result\").style.display = \"block\";\n"
    "        document.getElementById(\"result-meta\").innerHTML = `<div class=\"status success\">${status}</div>`;\n"
    "        \n"
    "        let type = \"Unknown Attack Type\";\n"
    "        switch(attack_type) {\n"
    "            case AttackTypeEnum.ATTACK_TYPE_PASSIVE:\n"
    "                type = \"Passive Scan\";\n"
    "                break;\n"
    "            case AttackTypeEnum.ATTACK_TYPE_HANDSHAKE:\n"
    "                type = \"Handshake Capture\";\n"
    "                resultHandshake(attack_content, attack_content_size);\n"
    "                break;\n"
    "            case AttackTypeEnum.ATTACK_TYPE_PMKID:\n"
    "                type = \"PMKID Capture\";\n"
    "                resultPmkid(attack_content, attack_content_size);\n"
    "                break;\n"
    "            case AttackTypeEnum.ATTACK_TYPE_DOS:\n"
    "                type = \"Denial of Service\";\n"
    "                break;\n"
    "        }\n"
    "        \n"
    "        document.getElementById(\"result-meta\").innerHTML += `<div class=\"status\">Attack Type: ${type}</div>`;\n"
    "    }\n"
    "\n"
    "    function refreshAps() {\n"
    "        document.getElementById(\"ap-list\").querySelector(\"tbody\").innerHTML = \"<tr><td colspan='3'>Loading access points...</td></tr>\";\n"
    "        \n"
    "        var oReq = new XMLHttpRequest();\n"
    "        oReq.onload = function() {\n"
    "            var tbody = document.getElementById(\"ap-list\").querySelector(\"tbody\");\n"
    "            tbody.innerHTML = \"\";\n"
    "            \n"
    "            var arrayBuffer = oReq.response;\n"
    "            if(arrayBuffer) {\n"
    "                var byteArray = new Uint8Array(arrayBuffer);\n"
    "                for(let i = 0; i < byteArray.byteLength; i = i + 40) {\n"
    "                    var tr = document.createElement('tr');\n"
    "                    tr.setAttribute(\"onClick\", \"selectAp(this)\");\n"
    "                    \n"
    "                    var ssid = new TextDecoder(\"utf-8\").decode(byteArray.subarray(i, i + 32)).trim();\n"
    "                    var bssid = Array.from(byteArray.subarray(i + 33, i + 39))\n"
    "                        .map(b => b.toString(16).padStart(2, '0'))\n"
    "                        .join(':');\n"
    "                    var rssi = byteArray[i + 39] - 255;\n"
    "                    \n"
    "                    tr.innerHTML = `\n"
    "                        <td>${ssid}</td>\n"
    "                        <td>${bssid}</td>\n"
    "                        <td>${rssi} dBm</td>\n"
    "                    `;\n"
    "                    \n"
    "                    tbody.appendChild(tr);\n"
    "                }\n"
    "            }\n"
    "        };\n"
    "        \n"
    "        oReq.onerror = function() {\n"
    "            document.getElementById(\"ap-list\").querySelector(\"tbody\").innerHTML = \n"
    "                \"<tr><td colspan='3' class='error'>Error loading access points</td></tr>\";\n"
    "        };\n"
    "        \n"
    "        oReq.open(\"GET\", \"http://192.168.4.1/ap-list\", true);\n"
    "        oReq.responseType = \"arraybuffer\";\n"
    "        oReq.send();\n"
    "    }\n"
    "\n"
    "    function selectAp(el) {\n"
    "        if(selectedApElement) {\n"
    "            selectedApElement.classList.remove(\"selected\");\n"
    "        }\n"
    "        selectedApElement = el;\n"
    "        el.classList.add(\"selected\");\n"
    "    }\n"
    "\n"
    "    function runAttack() {\n"
    "        if(!selectedApElement) {\n"
    "            showError(\"Please select an access point first\");\n"
    "            return;\n"
    "        }\n"
    "        \n"
    "        hideAllSections();\n"
    "        showRunning();\n"
    "        \n"
    "        var arrayBuffer = new ArrayBuffer(4);\n"
    "        var uint8Array = new Uint8Array(arrayBuffer);\n"
    "        uint8Array[0] = parseInt(selectedApElement.rowIndex - 1); // Adjust for header row\n"
    "        uint8Array[1] = parseInt(document.getElementById(\"attack_type\").value);\n"
    "        uint8Array[2] = parseInt(document.getElementById(\"attack_method\").value);\n"
    "        uint8Array[3] = parseInt(document.getElementById(\"attack_timeout\").value);\n"
    "        \n"
    "        var oReq = new XMLHttpRequest();\n"
    "        oReq.open(\"POST\", \"http://192.168.4.1/run-attack\", true);\n"
    "        oReq.send(arrayBuffer);\n"
    "        \n"
    "        attack_timeout = parseInt(document.getElementById(\"attack_timeout\").value);\n"
    "        time_elapsed = 0;\n"
    "        running_poll = setInterval(countProgress, running_poll_interval);\n"
    "        \n"
    "        getStatus();\n"
    "    }\n"
    "\n"
    "    function resetAttack() {\n"
    "        hideAllSections();\n"
    "        showAttackConfig();\n"
    "        \n"
    "        var oReq = new XMLHttpRequest();\n"
    "        oReq.open(\"HEAD\", \"http://192.168.4.1/reset\", true);\n"
    "        oReq.send();\n"
    "    }\n"
    "\n"
    "    function resultPmkid(attack_content, attack_content_size){\n"
    "        var mac_ap = \"\";\n"
    "        var mac_sta = \"\";\n"
    "        var ssid = \"\";\n"
    "        var ssid_text = \"\";\n"
    "        var pmkid = \"\";\n"
    "        var index = 0;\n"
    "        for(let i = 0; i < 6; i = i + 1) {\n"
    "            mac_ap += uint8ToHex(attack_content[index + i]);\n"
    "        }\n"
    "        index = index + 6;\n"
    "        for(let i = 0; i < 6; i = i + 1) {\n"
    "            mac_sta += uint8ToHex(attack_content[index + i]);\n"
    "        }\n"
    "        index = index + 6;\n"
    "        for(let i = 0; i < attack_content[index]; i = i + 1) {\n"
    "            ssid += uint8ToHex(attack_content[index + 1 + i]);\n"
    "            ssid_text += String.fromCharCode(attack_content[index + 1 + i]);\n"
    "        }\n"
    "        index = index + attack_content[index] + 1;\n"
    "        var pmkid_cnt = 0;\n"
    "        for(let i = 0; i < attack_content_size - index; i = i + 1) {\n"
    "            if((i % 16) == 0){\n"
    "                pmkid += \"<br>\";\n"
    "                pmkid += \"</code>PMKID #\" + pmkid_cnt + \": <code>\";\n"
    "                pmkid_cnt += 1;\n"
    "            }\n"
    "            pmkid += uint8ToHex(attack_content[index + i]);\n"
    "        }\n"
    "        document.getElementById(\"result-content\").innerHTML = \"\";\n"
    "        document.getElementById(\"result-content\").innerHTML += \"MAC AP: <code>\" + mac_ap + \"</code><br>\";\n"
    "        document.getElementById(\"result-content\").innerHTML += \"MAC STA: <code>\" + mac_sta + \"</code><br>\";\n"
    "        document.getElementById(\"result-content\").innerHTML += \"(E)SSID: <code>\" + ssid + \"</code> (\" + ssid_text + \")\";\n"
    "        document.getElementById(\"result-content\").innerHTML += \"<code>\" + pmkid + \"</code><br>\";\n"
    "        document.getElementById(\"result-content\").innerHTML += \"<br>Hashcat ready format:\"\n"
    "        document.getElementById(\"result-content\").innerHTML += \"<code>\" + pmkid + \"*\" + mac_ap + \"*\" + mac_sta  + \"*\" + ssid  + \"</code><br>\";\n"
    "    }\n"
    "\n"
    "    function resultHandshake(attack_content, attack_content_size){\n"
    "        document.getElementById(\"result-content\").innerHTML = \"\";\n"
    "        var pcap_link = document.createElement(\"a\");\n"
    "        pcap_link.setAttribute(\"href\", \"capture.pcap\");\n"
    "        pcap_link.text = \"Download PCAP file\";\n"
    "        var hccapx_link = document.createElement(\"a\");\n"
    "        hccapx_link.setAttribute(\"href\", \"capture.hccapx\");\n"
    "        hccapx_link.text = \"Download HCCAPX file\";\n"
    "        document.getElementById(\"result-content\").innerHTML += \"<p>\" + pcap_link.outerHTML + \"</p>\";\n"
    "        document.getElementById(\"result-content\").innerHTML += \"<p>\" + hccapx_link.outerHTML + \"</p>\";\n"
    "        var handshakes = \"\";\n"
    "        for(let i = 0; i < attack_content_size; i = i + 1) {\n"
    "            handshakes += uint8ToHex(attack_content[i]);\n"
    "            if(i % 50 == 49) {\n"
    "                handshakes += \"\\n\";\n"
    "            }\n"
    "        }\n"
    "        document.getElementById(\"result-content\").innerHTML += \"<pre><code>\" + handshakes + \"</code></pre>\";\n"
    "    }\n"
    "\n"
    "    function uint8ToHex(uint8){\n"
    "        return (\"00\" + uint8.toString(16)).slice(-2);\n"
    "    }\n"
    "\n"
    "    function updateConfigurableFields(el){\n"
    "        document.getElementById(\"attack_method\").outerHTML = defaultAttackMethods;\n"
    "        switch(parseInt(el.value)){\n"
    "            case AttackTypeEnum.ATTACK_TYPE_PASSIVE:\n"
    "                console.log(\"PASSIVE configuration\");\n"
    "                break;\n"
    "            case AttackTypeEnum.ATTACK_TYPE_HANDSHAKE:\n"
    "                console.log(\"HANDSHAKE configuration\");\n"
    "                document.getElementById(\"attack_timeout\").value = 60;\n"
    "                setAttackMethods([\"DEAUTH_ROGUE_AP (PASSIVE)\", \"DEAUTH_BROADCAST (ACTIVE)\", \"CAPTURE_ONLY (PASSIVE)\"]);\n"
    "                break;\n"
    "            case AttackTypeEnum.ATTACK_TYPE_PMKID:\n"
    "                console.log(\"PMKID configuration\");\n"
    "                document.getElementById(\"attack_timeout\").value = 5;\n"
    "                break;\n"
    "            case AttackTypeEnum.ATTACK_TYPE_DOS:\n"
    "                console.log(\"DOS configuration\");\n"
    "                document.getElementById(\"attack_timeout\").value = 120;\n"
    "                setAttackMethods([\"DEAUTH_ROGUE_AP (PASSIVE)\", \"DEAUTH_BROADCAST (ACTIVE)\", \"DEAUTH_COMBINE_ALL\"]);\n"
    "                break;\n"
    "            default:\n"
    "                console.log(\"Unknown attack type\");\n"
    "                break;\n"
    "        }\n"
    "    }\n"
    "\n"
    "    function setAttackMethods(attackMethodsArray){\n"
    "        document.getElementById(\"attack_method\").removeAttribute(\"disabled\");\n"
    "        attackMethodsArray.forEach(function(method, index){\n"
    "            let option = document.createElement(\"option\");\n"
    "            option.value = index;\n"
    "            option.text = method;\n"
    "            option.selected = true;\n"
    "            document.getElementById(\"attack_method\").appendChild(option);\n"
    "        });\n"
    "    }\n"
    "    </script>\n"
    "</body>\n"
    "</html>\n";

const size_t page_index_len = sizeof(page_index) - 1;

#endif
